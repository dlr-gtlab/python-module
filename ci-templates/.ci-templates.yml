# TEMPLATES FOR JOBS
# the jobs uses the tags 
# Win10    -  for the windows os
# Liunx    -  for the linux os

variables:
  TEMPLATEVAR: "Template Variable"
  
# template rules
.stable-debug:
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != null && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ $STABLE_BRANCHES
    - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH =~ $STABLE_BRANCHES
    - if: $CI_COMMIT_TAG != null

.stable-release:
  rules:
    - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH =~ $STABLE_BRANCHES
    - if: $CI_COMMIT_TAG != null

.unstable-debug:
  rules:
    - if: $UNSTABLE_BRANCH == null && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != null && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ $STABLE_BRANCHES
      allow_failure: true
    - if: $UNSTABLE_BRANCH == null && $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH =~ $STABLE_BRANCHES
      allow_failure: true
    - if: $UNSTABLE_BRANCH == null && $CI_COMMIT_TAG != null
      allow_failure: true
    - if: $UNSTABLE_BRANCH != null && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != null && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $UNSTABLE_BRANCH
    - if: $UNSTABLE_BRANCH != null && $CI_COMMIT_BRANCH == $UNSTABLE_BRANCH

.unstable-release:
  rules:
    - if: $UNSTABLE_BRANCH == null && $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH =~ $STABLE_BRANCHES
      allow_failure: true
    - if: $UNSTABLE_BRANCH == null && $CI_COMMIT_TAG != null
      allow_failure: true
    - if: $UNSTABLE_BRANCH != null && $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH == $UNSTABLE_BRANCH

.update-rules:
  rules:
  - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH =~ $STABLE_BRANCHES
  - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH == $UNSTABLE_BRANCH
  
.except-tags:
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != null && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ $STABLE_BRANCHES
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != null && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $UNSTABLE_BRANCH
    - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH =~ $STABLE_BRANCHES
    - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH == $UNSTABLE_BRANCH
    - if: $CI_COMMIT_TAG != null
      when: never

# build on linux system
# Uses the variables PROFILENAME and BUILDMODE
.buildLinux:
  before_script:
    - cp features/gitlab_pipeline_local_settings.pri local_settings.pri
  script:
    - /opt/Qt/5.12.5/gcc_64/bin/qmake $PROFILENAME -spec linux-g++ CONFIG+=$BUILDMODE
    - make clean
    - make -j 20 |& tee linuxBuild.txt

# Unit test job on windows machine
.winTestTemplate:
  stage: test
  script:
    - .\tests\unittests\runUnittestsQt512.bat
    - get-content CoverageReport*\index.html
  tags:
    - Win10
  artifacts:
    paths:
      - "unittests.xml"
      - ${UNITTESTSNAME}Coverage.xml
      - CoverageReport*
    reports:
      junit: unittests.xml
      cobertura: ${UNITTESTSNAME}Coverage.xml
    expire_in: 1 week

# Unit test job on linux machine
.linuxTestTemplate:
  stage: test
  before_script:
    - chmod +x ./tests/unittests/runUnittests.sh
  script:
    - ./tests/unittests/runUnittests.sh
  tags:
    - Linux
  artifacts:
    paths:
      - "unittests.xml"
    expire_in: 1 week
    reports:
      junit: unittests.xml

.copyDeployTemplate:
  tags:
    - Win10
  only:
    - tags
  stage: copy
  script:
    - .\tests\build\copyHeaders-deployment.bat  

.devToolsUpdateWindows:
  allow_failure: true
  script:
    - '& $env:MAINTENANCETOOL up --confirm-command'
  tags:
    - Win10
  variables:
    MAINTENANCETOOL: "C:\\devel\\GTlab-DevTools\\Setup GTlab-DevTools.exe"

.devToolsUpdateLinux:
  allow_failure: true  
  script:
    - cd /home/gitlab-runner/GTlab-Devtools/
    - ./Setup\ GTlab-DevTools up --confirm-command
  tags:
    - Linux
  variables:
    MAINTENANCETOOL: "/home/gitlab-runner/GTlab-Devtools/"   
 
.cppCheckTemplate:
  needs: []
  allow_failure: true
  tags:
    - Linux
  before_script:
    - python3 -m venv env
    - source env/bin/activate
    - python3 -m pip install cppcheck-codequality
  script:
    - cppcheck --xml --suppress=unusedFunction  --enable=all src/ 2> cppcheck_out.xml
    - cppcheck-codequality --input-file=cppcheck_out.xml --output-file=codequality.json
  artifacts:
    reports:
      codequality: codequality.json    

.codingStyleTemplate:
  needs: []
  allow_failure: true
  script:
    - '& $env:CODINGSTYLETOOL --ci --output=xml -o .\ -f  .\features\filefilter.txt .\src 1>codingStyleLog.txt'
  tags:
    - Win10
  dependencies:
  artifacts:
    paths:
      - "nsiqcppstyle_report.xml"
      - codingStyleLog.txt   
    expire_in: 1 week
  variables:
    CODINGSTYLETOOL: "C:\\Program Files\\nsiqcppstyle_0.2.2.3\\nsiqcppstyle\\nsiqcppstyle"  

.pageTemplate:
  needs: []
  dependencies:  
  tags:
    - Linux
  script:
    - doxygen features/doxygenConfig
    - mkdir public
    - mv doc/html/* public/
  artifacts:
     paths:
       - public/

.badgeTemplate:
  allow_failure: true  
  script:
    - $CommitNumber = git rev-list --count HEAD
    - $statistics = git diff --shortstat 4b825dc642cb6eb9a060e54bf8d69288fbee4904
    - $filesRaw,$linesRaw = $statistics.split(',')
    - $fileNumber = $filesRaw.split(' ')[1]
    - $linenumber = $linesRaw.split(' ')[1]
    - '& $env:BADGEGENERATOR --run files $fileNumber'
    - '& $env:BADGEGENERATOR --run commits $CommitNumber'
    - '& $env:BADGEGENERATOR --bw .\buildLog512.txt .'
    - '& $env:BADGEGENERATOR --bw .\linuxBuild.txt .'
    - '& $env:BADGEGENERATOR --cs .\codingStyleLog.txt .'
    - '& $env:BADGEGENERATOR --cc .\${UNITTESTSNAME}Coverage.xml .'
    - '& $env:BADGEGENERATOR --cl .\${UNITTESTSNAME}Coverage.xml .'
    - '& $env:BADGEGENERATOR --dp "Pipeline-Version" ${PIPELINEVERSION} .'
  dependencies:
    - "windowsBuildDebug: [$DEVTOOLS_Win_Unstable]"
    - "linuxBuildDebug: [$DEVTOOLS_Linux_Stable]"
    - testWin512
    - testLinux512
    - codingstyle
  tags:
    - Win10
  artifacts:
    paths:
      - "New_*.svg"
    expire_in: 4 week
  variables:
    BADGEGENERATOR: C:\devel\BadgeBuilder\BadgeGenerator.exe


### Jobs that use the submodule GitLab-Pipeline-Scripts
# build on windows system
.buildWinDebugSub:
  before_script:
    - git submodule sync
    - git submodule update --init
  script:
    - echo $TEMPLATEVAR
    - .\tests\pipeline-scripts\build\build-512.bat 1>buildLog512.txt
  tags:
    - Win10
  artifacts:
    paths:
      - lib\$TARGETDIRNAME\$TARGETNAME-d.dll
      - lib\$TARGETDIRNAME\$TARGETNAME-d.lib
      - lib\$TARGETDIRNAME\$TARGETNAME-d.pdb
      - include\$TARGETDIRNAME\*.h
      - build\$UNITTESTSNAME.exe
      - build\$UNITTESTSNAME.pdb
      - buildLog512.txt
    expire_in: 1 week
    when: always
  variables:
    BUILDMODE: debug
    BUILDUNITTESTS: "true"

.buildWinReleaseSub:
  before_script:
    - git submodule sync
    - git submodule update --init
  script:
    - .\tests\pipeline-scripts\build\build-512.bat 1>buildLog512.txt
  tags:
    - Win10
  artifacts:
    paths:
      - lib\$TARGETDIRNAME\$TARGETNAME.dll
      - lib\$TARGETDIRNAME\$TARGETNAME.lib
      - include\$TARGETDIRNAME\*.h
    expire_in: 1 week
    when: always
  variables:
    BUILDMODE: release
    BUILDUNITTESTS: "false"

# Unit test job on windows machine
.winTestTemplateSub:
  before_script:
    - git submodule sync
    - git submodule update --init
  script:
    - .\tests\pipeline-scripts\unittests\runUnittestsQt512.bat
    - get-content CoverageReport*\index.html
  tags:
    - Win10
  artifacts:
    paths:
      - "unittests.xml"
      - ${UNITTESTSNAME}Coverage.xml
      - CoverageReport*
    reports:
      junit: unittests.xml
      cobertura: ${UNITTESTSNAME}Coverage.xml
    expire_in: 1 week

# Unit test job on linux machine
.linuxTestTemplateSub:
  before_script:
    - git submodule sync
    - git submodule update --init
    - chmod +x ./tests/pipeline-scripts/unittests/runUnittests.sh
  script:
    - ./tests/pipeline-scripts/unittests/runUnittests.sh
  tags:
    - Linux
  artifacts:
    paths:
      - "unittests.xml"
    expire_in: 1 week
    reports:
      junit: unittests.xml

# Copy binaries jobs
.createJobsTemplate:
  tags:
    - Win10
  before_script:
    - git submodule sync
    - git submodule update --init
    - $TEMP_REGEXP=$STABLE_BRANCHES.TrimStart('/')
    - $TEMP_REGEXP=$TEMP_REGEXP.TrimEnd('/')
    - git ls-remote origin | Select-String $CI_COMMIT_SHA | Select-String refs/heads/ | % {$_ -replace ".*\/", ""} | Select-String -Pattern "$TEMP_REGEXP" | % {$_.Line} | echo -outvariable STABLE_COMMIT_BRANCH
  script:
    # The tag base is a stable branch and there is no separated unstable branch.
    - if(!(${UNSTABLE_BRANCH}) -and (${STABLE_COMMIT_BRANCH})){ & $PYTHONEXEPATH ${PYCONFIGDYNJOB} -t ${TEMPLATEFILE} -o ${OUTPUTYAML} -r PLATFORMNAME windows -r RELEASESTATUS stable -r DEPENDDEBUG  ${WinDeStableJob} -r DEPENDRELEASE ${WinReStableJob} -r JOBNAME deployStableWin }
    - if(!(${UNSTABLE_BRANCH}) -and (${STABLE_COMMIT_BRANCH})){ & $PYTHONEXEPATH ${PYCONFIGDYNJOB} -t ${TEMPLATEFILE} -o ${OUTPUTYAML} -r PLATFORMNAME windows -r RELEASESTATUS unstable -r DEPENDDEBUG ${WinDeUnstableJob} -r DEPENDRELEASE ${WinReUnstableJob} -r JOBNAME deployUntableWin }
    - if(!(${UNSTABLE_BRANCH}) -and (${STABLE_COMMIT_BRANCH})){ & $PYTHONEXEPATH ${PYCONFIGDYNJOB} -t ${TEMPLATEFILE} -o ${OUTPUTYAML} -r PLATFORMNAME linux -r RELEASESTATUS stable -r DEPENDDEBUG ${LinDeStableJob} -r DEPENDRELEASE ${LinReStableJob} -r JOBNAME deployStableLinux }
    - if(!(${UNSTABLE_BRANCH}) -and (${STABLE_COMMIT_BRANCH})){ & $PYTHONEXEPATH ${PYCONFIGDYNJOB} -t ${TEMPLATEFILE} -o ${OUTPUTYAML} -r PLATFORMNAME linux -r RELEASESTATUS unstable -r DEPENDDEBUG ${LinDeUnstableJob} -r DEPENDRELEASE ${LinReUnstableJob} -r JOBNAME deployUnstableLinux }
    # The tag base is a stable branch and there is a separated unstable branch.
    - if((${UNSTABLE_BRANCH}) -and (${STABLE_COMMIT_BRANCH})){ & $PYTHONEXEPATH ${PYCONFIGDYNJOB} -t ${TEMPLATEFILE} -o ${OUTPUTYAML} -r PLATFORMNAME windows -r RELEASESTATUS stable -r DEPENDDEBUG  ${WinDeStableJob} -r DEPENDRELEASE ${WinReStableJob} -r JOBNAME deployStableWin }
    - if((${UNSTABLE_BRANCH}) -and (${STABLE_COMMIT_BRANCH})){ & $PYTHONEXEPATH ${PYCONFIGDYNJOB} -t ${TEMPLATEFILE} -o ${OUTPUTYAML} -r PLATFORMNAME linux -r RELEASESTATUS stable -r DEPENDDEBUG ${LinDeStableJob} -r DEPENDRELEASE ${LinReStableJob} -r JOBNAME deployStableLinux }
    # The tag base is an unstable branch.
    - if((${UNSTABLE_BRANCH}) -and !(${STABLE_COMMIT_BRANCH})){ & $PYTHONEXEPATH ${PYCONFIGDYNJOB} -t ${TEMPLATEFILE} -o ${OUTPUTYAML} -r PLATFORMNAME windows -r RELEASESTATUS unstable -r DEPENDDEBUG ${WinDeUnstableJob} -r DEPENDRELEASE ${WinReUnstableJob} -r JOBNAME deployUntableWin }
    - if((${UNSTABLE_BRANCH}) -and !(${STABLE_COMMIT_BRANCH})){ & $PYTHONEXEPATH ${PYCONFIGDYNJOB} -t ${TEMPLATEFILE} -o ${OUTPUTYAML} -r PLATFORMNAME linux -r RELEASESTATUS unstable -r DEPENDDEBUG ${LinDeUnstableJob} -r DEPENDRELEASE ${LinReUnstableJob} -r JOBNAME deployUnstableLinux }
  artifacts:
    paths:
      - deploy.yml
  variables:
    PYTHONEXEPATH: "C:\\ProgramData\\Miniconda3\\python.exe"
    PYCONFIGDYNJOB: .\tests\pipeline-scripts\deploy\DynJobConfiguration.py
    TEMPLATEFILE: .\tests\pipeline-scripts\deploy\deployJob.template
    OUTPUTYAML: .\deploy.yml

.copyNightlyTemplateSub:
  stage: copy
  before_script:
    - git submodule sync
    - git submodule update --init
  script:
    - .\tests\pipeline-scripts\build\copyHeaders-nightlybuild.bat
  tags:
    - Win10
  only:
    - master
  allow_failure: true
  variables:
    NIGHTLYBUILD: "G:\\AT-TW\\GTlab\\Nightly_Builds_512"

# Automated package.xml generation
.packageTemplateSub:
  tags:
    - Win10
  rules:
    - if: $CI_COMMIT_TAG != null
  before_script:
    - git submodule sync
    - git submodule update --init
  script:
     - '& $env:PYTHONEXEPATH ${PYPACKAGEGEN} ${PACKAGETEMPLATE} ${RELEASESTATUS} ${FRAMEWORK_MAJOR} ${FRAMEWORK_MINOR} ${CI_COMMIT_TAG}'
  artifacts:  
    paths:
      - components/
    when: always
  variables:
    PYTHONEXEPATH: "C:\\ProgramData\\Miniconda3\\python.exe"
    PYPACKAGEGEN: .\tests\pipeline-scripts\package\packageGen.py
    PACKAGETEMPLATE: .\features\package_template.xml
  parallel:
    matrix:
      - RELEASESTATUS: stable
        FRAMEWORK_MAJOR: "1"
        FRAMEWORK_MINOR: "7"
      - RELEASESTATUS: unstable
        FRAMEWORK_MAJOR: "2"
        FRAMEWORK_MINOR: "0"

# New templates using rules

.devToolsUpdateWindowsRules:
  extends: .update-rules
  allow_failure: true
  script:
    - '& $env:MAINTENANCETOOL up --confirm-command'
  tags:
    - Win10
  variables:
    MAINTENANCETOOL: "C:\\devel\\GTlab-DevTools\\Setup GTlab-DevTools.exe"

.devToolsUpdateLinuxRules:
  extends: .update-rules 
  allow_failure: true  
  script:
    - cd /home/gitlab-runner/GTlab-Devtools/
    - ./Setup\ GTlab-DevTools up --confirm-command
  tags:
    - Linux
  variables:
    MAINTENANCETOOL: "/home/gitlab-runner/GTlab-Devtools/" 

.buildLinuxDebug:
  extends: 
    - .buildLinux
  tags:
    - Linux
  artifacts:
    paths:
      - lib/$TARGETDIRNAME/lib$TARGETNAME-d.so
      - include/$TARGETDIRNAME/*.h
      - build/$UNITTESTSNAME
      - linuxBuild.txt
    when: always
    expire_in: 1 week
  variables:
    BUILDMODE: debug
    BUILDUNITTESTS: "true"

.buildLinuxRelease:
  extends: 
    - .buildLinux
  tags:
    - Linux
  artifacts:
    paths:
      - lib/$TARGETDIRNAME/lib$TARGETNAME.so*
      - include/$TARGETDIRNAME/*.h
    expire_in: 1 week
  variables:
    BUILDMODE: release
    BUILDUNITTESTS: "false"

.codingStyleTemplateRules:
  needs: []
  extends: 
    - .except-tags
  allow_failure: true
  script:
    - '& $env:CODINGSTYLETOOL --ci --output=xml -o .\ -f  .\features\filefilter.txt .\src 1>codingStyleLog.txt'
  tags:
    - Win10
  dependencies:
  artifacts:
    paths:
      - "nsiqcppstyle_report.xml"
      - codingStyleLog.txt   
    expire_in: 1 week
  variables:
    CODINGSTYLETOOL: "C:\\Program Files\\nsiqcppstyle_0.2.2.3\\nsiqcppstyle\\nsiqcppstyle"

.cppCheckTemplateRules:
  needs: []
  extends:
    - .stable-debug  
  allow_failure: true
  tags:
    - Linux
  before_script:
    - python3 -m venv env
    - source env/bin/activate
    - python3 -m pip install cppcheck-codequality
  script:
    - cppcheck --xml --suppress=unusedFunction  --enable=all src/ 2> cppcheck_out.xml
    - cppcheck-codequality --input-file=cppcheck_out.xml --output-file=codequality.json
  artifacts:
    reports:
      codequality: codequality.json

.pageTemplateRules:
  needs: []
  rules:
    - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH =~ $STABLE_BRANCHES
    - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_BRANCH == $UNSTABLE_BRANCH
    - if: $CI_COMMIT_TAG != null
  dependencies:  
  tags:
    - Linux
  script:
    - doxygen features/doxygenConfig
    - mkdir public
    - mv doc/html/* public/
  artifacts:
     paths:
       - public/

.badgeTemplateRules:
  extends:
    - .except-tags
  allow_failure: true  
  script:
    - $CommitNumber = git rev-list --count HEAD
    - $statistics = git diff --shortstat 4b825dc642cb6eb9a060e54bf8d69288fbee4904
    - $filesRaw,$linesRaw = $statistics.split(',')
    - $fileNumber = $filesRaw.split(' ')[1]
    - $linenumber = $linesRaw.split(' ')[1]
    - '& $env:BADGEGENERATOR --run files $fileNumber'
    - '& $env:BADGEGENERATOR --run commits $CommitNumber'
    - '& $env:BADGEGENERATOR --bw .\buildLog512.txt .'
    - '& $env:BADGEGENERATOR --bw .\linuxBuild.txt .'
    - '& $env:BADGEGENERATOR --cs .\codingStyleLog.txt .'
    - '& $env:BADGEGENERATOR --cc .\${UNITTESTSNAME}Coverage.xml .'
    - '& $env:BADGEGENERATOR --cl .\${UNITTESTSNAME}Coverage.xml .'
    - '& $env:BADGEGENERATOR --dp "Pipeline-Version" ${PIPELINEVERSION} .'
  dependencies:
    - "windowsBuildDebug: [$DEVTOOLS_Win_Unstable]"
    - "linuxBuildDebug: [$DEVTOOLS_Linux_Stable]"
    - testWin512
    - testLinux512
    - codingstyle
  tags:
    - Win10
  artifacts:
    paths:
      - "New_*.svg"
    expire_in: 4 week
  variables:
    BADGEGENERATOR: C:\devel\BadgeBuilder\BadgeGenerator.exe