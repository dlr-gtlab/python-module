########################################################
###############GTlab Pipeline Version 1.1.0 ############
########################################################

# Environment variables to use in the pipeline globally
variables:
  PROFILENAME: gtlab_python.pro
  TARGETDIRNAME: python37
  TARGETNAME: GTlabPython37
  UNITTESTSNAME: GTlabUnitTest
  
  DEVTOOLS_Win: "C:\\devel\\GTlab-DevTools\\stable\\1_6"
  DEVTOOLS_Linux: "/home/gitlab-runner/GTlab-Devtools/stable/1_6"
  
stages:
  - update
  - build
  - test
  - regressionTest
  - copy
  - codequality
  - badges

devtoolsUpdateWindows:
  stage: update
  script:
    - '& $env:MAINTENANCETOOL --silentUpdate'
  only:
    - master  
  tags:
    - Win10
  variables:
    MAINTENANCETOOL: "C:\\devel\\GTlab-DevTools\\Setup GTlab-DevTools.exe"  

# build on Windows system

debugBuildWinPy37:
  stage: build
  script:
    - .\tests\build\build-512.bat 1>buildLog512.txt
  tags:
    - Win10
  artifacts:
    paths:
      #- lib\$TARGETDIRNAME\$TARGETNAME-d.dll
      #- lib\$TARGETDIRNAME\$TARGETNAME-d.exp
      #- lib\$TARGETDIRNAME\$TARGETNAME-d.ilk
      #- lib\$TARGETDIRNAME\$TARGETNAME-d.lib
      #- lib\$TARGETDIRNAME\$TARGETNAME-d.pdb
      - lib\$TARGETDIRNAME\$TARGETNAME.dll
      - lib\$TARGETDIRNAME\$TARGETNAME.exp
      - lib\$TARGETDIRNAME\$TARGETNAME.ilk
      - lib\$TARGETDIRNAME\$TARGETNAME.lib
      - lib\$TARGETDIRNAME\$TARGETNAME.pdb      
      - include\$TARGETDIRNAME\*.h
      - build\$UNITTESTSNAME.exe
      - build\$UNITTESTSNAME.pdb
      - buildLog512.txt
    expire_in: 1 week
    when: always
  variables:
    PYVERSION: "37"
    BUILDBATCH: "true"
    BUILDMODE: release
    BUILDUNITTESTS: "true"
    DEVTOOLS: "$DEVTOOLS_Win"

releaseBuildWinPy37:
  stage: build
  script:
    - .\tests\build\build-512.bat
  tags:
    - Win10
  only:
    - master
    - tags
  artifacts:
    paths:
      - lib\$TARGETDIRNAME\$TARGETNAME.dll
      - lib\$TARGETDIRNAME\$TARGETNAME.lib
      - include\$TARGETDIRNAME\*.h
    expire_in: 1 week
    when: always
  variables:
    PYVERSION: "37"
    BUILDBATCH: "false"
    BUILDMODE: release
    BUILDUNITTESTS: "false"
    DEVTOOLS: "$DEVTOOLS_Win"
    
# build on Linux system

debugBuildLinuxPy37:
  stage: build
  before_script:
    - chmod a+rwx ./tests/build/build-512.sh
  script:
    - ./tests/build/build-512.sh |& tee linuxBuild.txt
  tags:
    - Linux
  artifacts:
    paths:
      - lib/$TARGETDIRNAME/lib$TARGETNAME-d.so
      - include/$TARGETDIRNAME/*.h
      - build/$UNITTESTSNAME
      - linuxBuild.txt
    when: always
    expire_in: 1 week
  variables:
    PYVERSION: 37
    BUILDBATCH: "false"
    BUILDMODE: release
    BUILDUNITTESTS: "true"
    DEVTOOLS: "$DEVTOOLS_Linux"

releaseBuildLinuxPy37:
  stage: build
  before_script:
    - chmod a+rwx ./tests/build/build-512.sh
  script:
    - ./tests/build/build-512.sh
  tags:
    - Linux
  only:
    - master
    - tags
  artifacts:
    paths:
      - lib/$TARGETDIRNAME/lib$TARGETNAME.so*
      - include/$TARGETDIRNAME/*.h
    expire_in: 1 week
  variables:
    PYVERSION: 37
    BUILDBATCH: "false"
    BUILDMODE: release
    BUILDUNITTESTS: "false"
    DEVTOOLS: "$DEVTOOLS_Linux"
    
# run tests using the binary built before

testWinPy37:
  needs: ["debugBuildWinPy37"]
  stage: test
  script:
    - .\tests\unittests\runUnittestsQt512.bat
    - get-content CoverageReport*\index.html
  dependencies:
    - debugBuildWinPy37
  tags:
    - Win10
  artifacts:
    paths:
      - "unittests.xml"
      - ${UNITTESTSNAME}Coverage.xml
      - CoverageReport* 
    reports:
      junit: unittests.xml
      cobertura: ${UNITTESTSNAME}Coverage.xml
    expire_in: 1 week
  variables:
    DEVTOOLS: "$DEVTOOLS_Win"

testLinuxPy37:
  needs: ["debugBuildLinuxPy37"]
  stage: test
  before_script:
    - chmod +x ./tests/unittests/runUnittests.sh
  script:
    - ./tests/unittests/runUnittests.sh
  dependencies:
    - debugBuildLinuxPy37
  tags:
    - Linux
  artifacts:
    paths:
      - "unittests.xml"
    reports:
      junit: unittests.xml
  variables:
    DEVTOOLS: "$DEVTOOLS_Linux"

# copy file to servers

copyToNightlyBuildWin:
  stage: copy
  script:
    - .\tests\build\copyHeaders-nightlybuild.bat
  dependencies:
    - releaseBuildWinPy37
  tags:
    - Win10
  only:
    - master
  allow_failure: true
  variables:
    NIGHTLYBUILD: "G:\\AT-TW\\GTlab\\Nightly_Builds_512"

copyToInstallerServer:
  stage: copy
  script:
    - .\tests\build\copyHeaders-installer.bat
  dependencies:
    - debugBuildWinPy37
    - releaseBuildWinPy37
  tags:
    - Win10
  only:
    - tags

# checking the coding style

codingstyle:
  needs: []
  stage: codequality
  allow_failure: true
  script:
    - '& $env:CODINGSTYLETOOL --ci --output=xml -o .\ -f  .\features\filefilter.txt .\src 1>codingStyleLog.txt'
  tags:
    - Win10
  except:
    - tags
  dependencies:
  artifacts:
    paths:
      - "nsiqcppstyle_report.xml"
      - codingStyleLog.txt   
    expire_in: 1 week
  variables:
    CODINGSTYLETOOL: "C:\\Program Files\\nsiqcppstyle_0.2.2.3\\nsiqcppstyle\\nsiqcppstyle"

cppcheck:
  needs: []
  stage: codequality
  allow_failure: true
  tags:
    - Linux
  before_script:
    - python3 -m venv env
    - source env/bin/activate
    - python3 -m pip install cppcheck-codequality
  script:
    - cppcheck --xml --enable=all src/ 2> cppcheck_out.xml
    - cppcheck-codequality --input-file=cppcheck_out.xml --output-file=codequality.json
  artifacts:
    reports:
      codequality: codequality.json  

# badges

# badges
badges:
  stage: badges
  script:
    - $CommitNumber = git rev-list --count HEAD
    - $statistics = git diff --shortstat 4b825dc642cb6eb9a060e54bf8d69288fbee4904
    - $filesRaw,$linesRaw = $statistics.split(',')
    - $fileNumber = $filesRaw.split(' ')[1]
    - $linenumber = $linesRaw.split(' ')[1]
    - '& $env:BADGEGENERATOR --run files $fileNumber'
    - '& $env:BADGEGENERATOR --run commits $CommitNumber'
    - '& $env:BADGEGENERATOR --bw .\buildLog512.txt .'
    - '& $env:BADGEGENERATOR --bw .\linuxBuild.txt .'
    - '& $env:BADGEGENERATOR --cs .\codingStyleLog.txt .'
    - '& $env:BADGEGENERATOR --cc .\${UNITTESTSNAME}Coverage.xml .'
    - '& $env:BADGEGENERATOR --cl .\${UNITTESTSNAME}Coverage.xml .'
  tags:
    - Win10
  except:
    - tags
  artifacts:
    paths:
      - "New_commits.svg"
      - "New_files.svg"
      - "New_BuildWarn-W.svg"
      - "New_BuildWarn-L.svg"
      - "New_CodingStyle.svg"
      - "New_Coverage.svg"
      - "New_lines.svg"
    expire_in: 52 week
  variables:
    BADGEGENERATOR: C:\devel\BadgeBuilder\BadgeGenerator.exe

