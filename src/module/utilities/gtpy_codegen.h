/* GTlab - Gas Turbine laboratory
 * Source File: gtpy_codegen.h
 *
 * SPDX-License-Identifier: Apache-2.0
 * SPDX-FileCopyrightText: 2024 German Aerospace Center (DLR)
 *
 * Created on: 19.12.2024
 * Author: Marvin Noethen (DLR AT-TWK)
 */

#ifndef GTPY_CODEGEN_H
#define GTPY_CODEGEN_H

#include <QString>

#include "gt_pythonmodule_exports.h"

class GtObject;
class GtCalculator;
class GtAbstractProperty;

/**
 * Namespace for functions that genrates Python code.
 */
namespace gtpy
{
namespace codegen
{

/**
 * @brief Returns a Python-compatible identifier based on the specified string.
 * The identifier is generated by removing special characters, converting
 * whitespaces to underscores and transforming uppercase letters to lowercase.
 * @note A valid Python identifier starts with a letter or an
 * underscore and contains only letters, numbers, and underscores.
 * @param str Base string from which the Python-compatible identifier is
 * generated.
 * @return A Python-compatible identifier based on the given string. If the
 * string is empty or cannot be converted, an empty QString is returned.
 */
QString GT_PYTHON_EXPORT pyIdentifier(const QString& str);

/**
 * @brief Returns a Python-compatible object identifier for the specified
 * object. If the object name is empty, it falls back to using the class name
 * of the object to generate the identifier.
 * @param obj Object for which the Python-compatible identifier is generated.
 * @return A Python-compatible object identifier. If the object is null or
 * the identifier cannot be generated, an empty QString is returned.
 */
QString GT_PYTHON_EXPORT pyObjectIdentifier(GtObject* obj);

/**
  * @brief Returns the object path of the specified object as Python code.
  * The object path can be used to access the object in Python. It begins
  * with the GtPackage to which the object belongs.
  * @param obj The GtObject for which to generate the Python object path.
  * @return The object path of the specified object which can be used to
  * access the corresponding object in Python.
  */
QString GT_PYTHON_EXPORT pyObjectPath(GtObject* obj);

/**
 * @brief Returns a Python-compatible setter method name from the specified
 * string. The setter name is created by capitalizing the first letter of the
 * given string and prefixing it with "set".
 * @note To maintain compatibility with scripts created using older versions of
 * the Python module, the returned setter name does not follow Python naming
 * conventions for methods.
 * @param str Base string used to generate the Python setter method name.
 * @return The generated setter method name. If the input string is empty or
 * contains only special characters, an empty QString is returned.
 */
QString GT_PYTHON_EXPORT pySetterName(const QString& str);

/**
 * @brief Returns a Python-compatible setter method name for the specified
 * property. The setter method name is generated by calling
 * gtpy::codegen::pySetterName(str) with the property ident as the input
 * parameter.
 * In Python, this setter method is associated with the object that
 * owns the property. The generated method name can be used to set the
 * corresponding property value on the object that owns the property.
 * @note To maintain compatibility with scripts created using older versions of
 * the Python module, the returned setter name does not follow Python naming
 * conventions for methods.
 * @param prop The property for which to generate the setter method name.
 * @return The setter method name for the specified property. If the setter
 * method name cannot be generated, an empty QString is returned.
 */
QString GT_PYTHON_EXPORT pyPropSetterName(GtAbstractProperty* prop);

/**
  * @brief Converts the property value of the given property to Python code
  * and returns it as QString.
  * @param prop Property whose value should be converted.
  * @return Value of property as Python code.
  */
QString GT_PYTHON_EXPORT pyPropValue(GtAbstractProperty* prop);

/**
 * @brief Generates Python code to create and configure a calculator object
 * based on the configuration of the specified calculator.
 * The generated Python code first creates the Python object. Then, setter
 * methods are called for all properties that differ from their default values.
 * @note Currently, the function does not handle helper classes associated with
 * the calculator. This behavior may be revisited in the future.
 * @param calc The calculator object for which the Python code should be
 * generated.
 * @return The Python code to create and configure the calculator object. If
 * the input calculator is invalid, an empty QString is returned.
 */
QString GT_PYTHON_EXPORT pyCalcCode(GtCalculator* calc);

} // namespace codegen

} // namespace gtpy

#endif // GTPY_CODEGEN_H
